#ifdef TEST1
	fprintf(stdout,"[TEST 1] 10 éléments\n");
	
	srand(time(NULL));
	for(cpt=0;cpt<10;cpt++)
	{
		Hashes[cpt]=rand()%INTMAX_MAX-1;
		ideez[cpt]=lc_add(&Hashes[cpt],pTestPerf,cssmint,sizeof(int));
	}
	
	for(cpt=0;cpt<5;cpt++)
	{
		start=clock();
		target=rand()%10+1;
	
		fprintf(stdout,"\tSearching for %05d\n",ideez[target]);
	
		lc_Datas *tmp=lc_search(pTestPerf,ideez[target]);
		if(tmp!=NULL)
		{
			fprintf(stdout,"\t[FOUND] %d\n",*(int*)tmp->value);
		
		
		}
	
		stop=clock();
		
		fprintf(stdout,"\t[PERF %d] %f second\n",cpt,(double)(stop-start)/CLOCKS_PER_SEC);
	}
	lc_empty(pTestPerf);
	free(Hashes);
	free(ideez);
	
	fprintf(stdout,"[TEST 2] 100 éléments\n");
	Hashes=calloc(100,sizeof(int));
	ideez=calloc(100,sizeof(int));
	
	srand(time(NULL));
	for(cpt=0;cpt<100;cpt++)
	{
		Hashes[cpt]=rand()%INTMAX_MAX-1;
		ideez[cpt]=lc_add(&Hashes[cpt],pTestPerf,cssmint,sizeof(int));
	}
	
	for(cpt=0;cpt<5;cpt++)
	{
		start=clock();
		target=rand()%100+1;
	
		fprintf(stdout,"\tSearching for %05d\n",ideez[target]);
	
		lc_Datas *tmp=lc_search(pTestPerf,ideez[target]);
		if(tmp!=NULL)
		{
			fprintf(stdout,"\t[FOUND] %d\n",*(int*)tmp->value);
		}
	
		stop=clock();
		
		fprintf(stdout,"\t[PERF %d] %f second\n",cpt,(double)(stop-start)/CLOCKS_PER_SEC);
	}
	lc_empty(pTestPerf);
	free(Hashes);
	free(ideez);
	
	fprintf(stdout,"[TEST 3] 1000 éléments\n");
	Hashes=calloc(1000,sizeof(int));
	ideez=calloc(1000,sizeof(int));
	
	srand(time(NULL));
	for(cpt=0;cpt<1000;cpt++)
	{
		Hashes[cpt]=rand()%INTMAX_MAX-1;
		ideez[cpt]=lc_add(&Hashes[cpt],pTestPerf,cssmint,sizeof(int));
	}
	
	for(cpt=0;cpt<5;cpt++)
	{
		start=clock();
		target=rand()%1000+1;
	
		fprintf(stdout,"\tSearching for %05d\n",ideez[target]);
	
		lc_Datas *tmp=lc_search(pTestPerf,ideez[target]);
		if(tmp!=NULL)
		{
			fprintf(stdout,"\t[FOUND] %d\n",*(int*)tmp->value);
		}
	
		stop=clock();
		
		fprintf(stdout,"\t[PERF %d] %f second\n",cpt,(double)(stop-start)/CLOCKS_PER_SEC);
	}
	lc_empty(pTestPerf);
	free(Hashes);
	free(ideez);
	
		fprintf(stdout,"[TEST 4] 10000 éléments\n");
	Hashes=calloc(10000,sizeof(int));
	ideez=calloc(10000,sizeof(int));
	
	srand(time(NULL));
	for(cpt=0;cpt<10000;cpt++)
	{
		Hashes[cpt]=rand()%INTMAX_MAX-1;
		ideez[cpt]=lc_add(&Hashes[cpt],pTestPerf,cssmint,sizeof(int));
	}
	
	for(cpt=0;cpt<5;cpt++)
	{
		start=clock();
		target=rand()%10000+1;
	
		fprintf(stdout,"\tSearching for %05d\n",ideez[target]);
	
		lc_Datas *tmp=lc_search(pTestPerf,ideez[target]);
		if(tmp!=NULL)
		{
			fprintf(stdout,"\t[FOUND] %d\n",*(int*)tmp->value);
		}
	
		stop=clock();
		
		fprintf(stdout,"\t[PERF %d] %f second\n",cpt,(double)(stop-start)/CLOCKS_PER_SEC);
	}
	lc_empty(pTestPerf);
	free(Hashes);
	free(ideez);
#endif 
